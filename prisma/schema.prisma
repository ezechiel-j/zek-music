// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//NEWS PAGE
model NewsPost {
  id               Int    @id @default(autoincrement())
  title            String @unique
  teaser           String @db.TinyText
  thumbnailSrc     String
  thumbnailAlt     String
  thumbnailCaption String @db.TinyText

  body String @db.LongText

  createdAt DateTime @default(now())
  readTime  Int      @db.TinyInt

  category   NewsPostCategory @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model NewsPostCategory {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  slug     String     @unique
  NewsPost NewsPost[]
}

// AGENDA PAGE
model Event {
  id           Int    @id @default(autoincrement())
  title        String @unique
  description  String @db.LongText
  thumbnailSrc String
  thumbnailAlt String

  startDate    DateTime  @db.Date
  startTime    DateTime  @db.Time()
  endDate      DateTime? @db.Date
  endTime      DateTime  @db.Time()
  city         String    @db.TinyText
  state        String?   @db.TinyText
  country      String    @db.TinyText
  place        String    @db.TinyText
  placeMapLink String

  isPaid        Boolean @default(false)
  boxOfficeLink String?
  hasProgram    Boolean @default(false)
  programLink   String?

  type   EventType @relation(fields: [typeId], references: [id])
  typeId Int
}

model EventType {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  slug  String  @unique
  Event Event[]
}

// BLOG PAGE
model BlogPost {
  id           Int    @id @default(autoincrement())
  thumbnailSrc String
  thumbnailAlt String
  title        String @unique
  readTime     Int    @db.TinyInt

  body String @db.LongText

  category   BlogPostCategory @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model BlogPostCategory {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  slug     String     @unique
  BlogPost BlogPost[]
}

// SETUP PAGE
model SetupItem {
  id           Int    @id @default(autoincrement())
  thumbnailSrc String
  thumbnailAlt String

  constructor String  @db.TinyText
  series      String? @db.TinyText
  model       String  @unique

  externalLink String @unique

  places          SetupItemsOnPlaces[]
  roles           SetupItemsOnRoles[]
  SetupItemType   SetupItemType        @relation(fields: [setupItemTypeId], references: [id])
  setupItemTypeId Int
}

model SetupItemType {
  id   Int    @id @default(autoincrement())
  name String @unique
  slug String @unique

  items SetupItem[]
}

model SetupItemPlace {
  id   Int    @id @default(autoincrement())
  name String @unique
  slug String @unique

  items SetupItemsOnPlaces[]
}

model SetupItemsOnPlaces {
  SetupItem        SetupItem      @relation(fields: [setupItemId], references: [id])
  setupItemId      Int
  SetupItemPlace   SetupItemPlace @relation(fields: [setupItemPlaceId], references: [id])
  setupItemPlaceId Int

  @@id([setupItemId, setupItemPlaceId])
}

model SetupItemRole {
  id   Int    @id @default(autoincrement())
  name String @unique
  slug String @unique

  items SetupItemsOnRoles[]
}

model SetupItemsOnRoles {
  SetupItem       SetupItem     @relation(fields: [setupItemId], references: [id])
  setupItemId     Int
  SetupItemRole   SetupItemRole @relation(fields: [setupItemRoleId], references: [id])
  setupItemRoleId Int

  @@id([setupItemId, setupItemRoleId])
}

// PRODUCTION PAGE
model Audio {
  id           Int    @id @default(autoincrement())
  thumbnailSrc String
  thumbnailAlt String
  title        String
  artist       String @default("Zek")

  spotifyLink     String? @unique
  tidalLink       String? @unique
  deezerLink      String? @unique
  appleMusicLink  String? @unique
  amazonMusicLink String? @unique

  AudioType   AudioType @relation(fields: [audioTypeId], references: [id])
  audioTypeId Int

  collaborators CollaboratorsOnAudios[]
}

model AudioType {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  slug  String  @unique
  Audio Audio[]
}

// Reels are fetched by API

// Videos
model Video {
  id           Int    @id @default(autoincrement())
  thumbnailSrc String
  thumbnailAlt String
  title        String
  externalLink String @unique

  collaborators CollaboratorsOnVideos[]
}

// Gallery
model GalleryImage {
  id          Int      @id @default(autoincrement())
  imgSrc      String
  imgAlt      String
  description String   @db.LongText
  createdAt   DateTime @default(now())

  collaborators CollaboratorsOnPhotos[]
}

// Collaborators
model Collaborator {
  id          Int    @id @default(autoincrement())
  pictureSrc  String
  pictureAlt  String
  name        String @unique
  description String @db.LongText

  link_instagram String? @unique
  link_facebook  String? @unique
  link_linkedin  String? @unique
  link_bandcamp  String? @unique
  link_fiverr    String? @unique

  extLink1 String? @unique
  extLink2 String? @unique
  extLink3 String? @unique
  extLink4 String? @unique
  extLink5 String? @unique

  videos CollaboratorsOnVideos[]
  photos CollaboratorsOnPhotos[]
  audios CollaboratorsOnAudios[]
}

model CollaboratorsOnVideos {
  Collaborator   Collaborator @relation(fields: [collaboratorId], references: [id])
  collaboratorId Int
  Video          Video        @relation(fields: [videoId], references: [id])
  videoId        Int

  @@id([collaboratorId, videoId])
}

model CollaboratorsOnPhotos {
  GalleryImage   GalleryImage @relation(fields: [galleryImageId], references: [id])
  galleryImageId Int
  Collaborator   Collaborator @relation(fields: [collaboratorId], references: [id])
  collaboratorId Int

  @@id([collaboratorId, galleryImageId])
}

model CollaboratorsOnAudios {
  Audio          Audio        @relation(fields: [audioId], references: [id])
  audioId        Int
  Collaborator   Collaborator @relation(fields: [collaboratorId], references: [id])
  collaboratorId Int

  @@id([audioId, collaboratorId])
}

// SERVICES PAGE
model Service {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String @db.Text

  price Float  @db.Double
  unit  String @db.TinyText

  category   ServiceCategory      @relation(fields: [categoryId], references: [id])
  categoryId Int
  contexts   ServicesOnContexts[]
}

model ServiceCategory {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  slug    String    @unique
  Service Service[]
}

model ServiceContext {
  id       Int                  @id @default(autoincrement())
  name     String               @unique
  slug     String               @unique
  services ServicesOnContexts[]
}

model ServicesOnContexts {
  Service          Service        @relation(fields: [serviceId], references: [id])
  serviceId        Int
  ServiceContext   ServiceContext @relation(fields: [serviceContextId], references: [id])
  serviceContextId Int

  @@id([serviceId, serviceContextId])
}
